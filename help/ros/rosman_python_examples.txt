$ roscd beginner_tutorials
$ mkdir scripts
$ cd scripts

----------------------------------------------------------------------------------------

SIMPLE PUBLISHER AND SUBSCRIBER 

put talker.py in scripts:
	#!/usr/bin/env python
	# license removed for brevity
	import rospy
	from std_msgs.msg import String

	def talker():
	    pub = rospy.Publisher('chatter', String, queue_size=10)
	    rospy.init_node('talker', anonymous=True)
	    rate = rospy.Rate(10) # 10hz
	    while not rospy.is_shutdown():
		hello_str = "hello world %s" % rospy.get_time()
		rospy.loginfo(hello_str)
		pub.publish(hello_str)
		rate.sleep()

	if __name__ == '__main__':
	    try:
		talker()
	    except rospy.ROSInterruptException:
		pass

put listener.py in scripts:
	#!/usr/bin/env python
	import rospy
	from std_msgs.msg import String

	def callback(data):
	    rospy.loginfo(rospy.get_caller_id() + "I heard %s", data.data)
	    
	def listener():

	    # In ROS, nodes are uniquely named. If two nodes with the same
	    # name are launched, the previous one is kicked off. The
	    # anonymous=True flag means that rospy will choose a unique
	    # name for our 'listener' node so that multiple listeners can
	    # run simultaneously.
	    rospy.init_node('listener', anonymous=True)

	    rospy.Subscriber("chatter", String, callback)

	    # spin() simply keeps python from exiting until this node is stopped
	    rospy.spin()

	if __name__ == '__main__':
	    listener()

$ chmod +x talker.py
$ chmod +x listener.py
$ cd ~/catkin_ws
$ catkin_make

$ rosrun beginner_tutorials talker.py   
$ rosrun beginner_tutorials listener.py   

----------------------------------------------------------------------------------------

SIMPLE SERVICE AND CLIENT

put add_two_ints_server.py in scripts:
	#!/usr/bin/env python

	from beginner_tutorials.srv import *
	import rospy

	def handle_add_two_ints(req):
	    print "Returning [%s + %s = %s]"%(req.a, req.b, (req.a + req.b))
	    return AddTwoIntsResponse(req.a + req.b)

	def add_two_ints_server():
	    rospy.init_node('add_two_ints_server')
	    s = rospy.Service('add_two_ints', AddTwoInts, handle_add_two_ints)
	    print "Ready to add two ints."
	    rospy.spin()

	if __name__ == "__main__":
	    add_two_ints_server()

put add_two_ints_client.py in scripts:
	#!/usr/bin/env python

	import sys
	import rospy
	from beginner_tutorials.srv import *

	def add_two_ints_client(x, y):
	    rospy.wait_for_service('add_two_ints')
	    try:
		add_two_ints = rospy.ServiceProxy('add_two_ints', AddTwoInts)
		resp1 = add_two_ints(x, y)
		return resp1.sum
	    except rospy.ServiceException, e:
		print "Service call failed: %s"%e

	def usage():
	    return "%s [x y]"%sys.argv[0]

	if __name__ == "__main__":
	    if len(sys.argv) == 3:
		x = int(sys.argv[1])
		y = int(sys.argv[2])
	    else:
		print usage()
		sys.exit(1)
	    print "Requesting %s+%s"%(x, y)
	    print "%s + %s = %s"%(x, y, add_two_ints_client(x, y))

$ chmod +x scripts/add_two_ints_server.py
$ chmod +x scripts/add_two_ints_client.py
$ cd ~/catkin_ws
$ catkin_make

$ rosrun beginner_tutorials add_two_ints_server.py 
$ rosrun beginner_tutorials add_two_ints_client.py 1 3  

----------------------------------------------------------------------------------------


























