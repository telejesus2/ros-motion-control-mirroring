Nodes: A node is an executable that uses ROS to communicate with other nodes.

Messages: ROS data type used when subscribing or publishing to a topic.

Topics: Nodes can publish messages to a topic as well as subscribe to a topic to receive messages.

Master: Name service for ROS (i.e. helps nodes find each other)

rosout: ROS equivalent of stdout/stderr

roscore: Master + rosout + parameter server (parameter server will be introduced later) 

----------------------------------------------------------------------------------------

NODES

$ roscore
$ sudo chown -R <your_username> ~/.ros		// if roscore tells you you dont have permission

in another terminal
$ rosnode list
$ rosnode info /rosout

$ rosrun [package_name] [node_name]		// rosrun turtlesim turtlesim_node __name:=my_turtle
$ rosnode ping my_turtle

----------------------------------------------------------------------------------------

TOPICS

$ rosrun turtlesim turtle_teleop_key	// turtle_teleop_key is publishing the key strokes on a topic, while turtlesim subscribes to the same topic to receive the key strokes
$ rosrun rqt_graph rqt_graph 		// to see a graph of the above

$ rostopic echo [topic]			// rostopic echo /turtle1/cmd_vel to see their exchanges (note : rostopic is also a node so it will appear in the graph)	
$ rostopic list -v

the publisher and subscriber must send and receive the same type of message in order to communicate
$ rostopic type [topic]			// rostopic type /turtle1/cmd_vel
$ rosmsg show geometry_msgs/Twist

rostopic pub publishes data on to a topic currently advertised
$ rostopic pub [topic] [msg_type] [args]	// rostopic pub -1 /turtle1/cmd_vel geometry_msgs/Twist -- '[2.0, 0.0, 0.0]' '[0.0, 0.0, 1.8]'	(note: -1 causes rostopic to only publish one message then exit) 	// rostopic pub /turtle1/cmd_vel geometry_msgs/Twist -r 1 -- '[2.0, 0.0, 0.0]' '[0.0, 0.0, -1.8]' steady command

reports the rate at which data is published
rostopic hz [topic] 			// rostopic hz /turtle1/pose

in depth info about a topic
$ rostopic type /turtle1/cmd_vel | rosmsg show

$ rosrun rqt_plot rqt_plot

----------------------------------------------------------------------------------------

SERVICES

Request / reply is done via a Service, which is defined by a pair of messages: one for the request and one for the reply. A providing ROS node offers a service under a string name, and a client calls the service by sending the request message and awaiting the reply. Client libraries usually present this interaction to the programmer as if it were a remote procedure call. 

rosservice list         print information about active services
rosservice call         call the service with the provided args
rosservice type         print service type
rosservice find         find services by service type
rosservice uri          print service ROSRPC uri

$ rosservice list
$ rosservice type [service]		// rosservice type /clear
$ rosservice call [service] [args]	// rosservice call /clear
ex :	rosservice type /spawn | rossrv show 
	rosservice call /spawn 2 2 0.2 ""

----------------------------------------------------------------------------------------

PARAMETERS

rosparam set [param_name]			set parameter
rosparam get [param_name]			get parameter
rosparam load [file_name] [namespace]		load parameters from file
rosparam dump [file_name] [namespace]          	dump parameters to file
rosparam delete         			delete parameter
rosparam list           			list parameter names

$ rosparam list
$ rosparam set /background_r 150 	// followed by rosservice call /clear to take effect
$ rosparam get /background_g 		// rosparam get / (to see everything)
$ rosparam dump params.yaml		// write parameters to file
$ rosparam load params.yaml copy	// load file into new namespace (ex: rosparam get /copy/background_b)

----------------------------------------------------------------------------------------

LOGGER AND CONSOLE

$ rosrun rqt_console rqt_console
$ rosrun rqt_logger_level rqt_logger_level

----------------------------------------------------------------------------------------

ROSLAUNCH

$ roslaunch [package] [filename.launch] 	// starts nodes as defined in a launch file
ex : 	$ roscd beginner_tutorials
	$ mkdir launch
	$ cd launch
	create file turtlemimic.launch
		<launch>

		  <group ns="turtlesim1">
		    <node pkg="turtlesim" name="sim" type="turtlesim_node"/>
		  </group>

		  <group ns="turtlesim2">
		    <node pkg="turtlesim" name="sim" type="turtlesim_node"/>
		  </group>

		  <node pkg="turtlesim" name="mimic" type="mimic">
		    <remap from="input" to="turtlesim1/turtle1"/>
		    <remap from="output" to="turtlesim2/turtle1"/>
		  </node>

		</launch>
	$ roslaunch beginner_tutorials turtlemimic.launch

----------------------------------------------------------------------------------------

ROS MSG AND SRV

msg: msg files are simple text files that describe the fields of a ROS message. They are used to generate source code for messages in different languages. 
ex :	Header header
	string child_frame_id
	geometry_msgs/PoseWithCovariance pose
	geometry_msgs/TwistWithCovariance twist
srv: an srv file describes a service. It is composed of two parts: a request and a response. 
ex :	int64 A
	int64 B
	---
	int64 Sum

$ rosmsg show [message type]	// rosmsg show beginner_tutorials/Num // rosmsg show Num
$ rossrv show <service type> 	// rossrv show beginner_tutorials/AddTwoInts  // rossrv show AddTwoInts

how to do :

	create msg
	$ roscd beginner_tutorials
	$ mkdir msg
	$ echo "int64 num" > msg/Num.msg

	create srv 
	$ roscd beginner_tutorials
	$ mkdir srv
	$ roscp rospy_tutorials AddTwoInts.srv srv/AddTwoInts.srv

	add to package.xml :
		 <build_depend>message_generation</build_depend>
		 <exec_depend>message_runtime</exec_depend>

	add to CMakeLists.txt :
		find_package(catkin REQUIRED COMPONENTS
		   roscpp
		   rospy
		   std_msgs
		   message_generation
		)
		catkin_package(
		  ...
		  CATKIN_DEPENDS message_runtime ...
		  ...)
		add_message_files(
		  FILES
		  Num.msg
		)
		add_service_files(
		  FILES
		  AddTwoInts.srv
		)
		generate_messages(
		  DEPENDENCIES
		  std_msgs
		)

	$ roscd beginner_tutorials
	$ cd ../..
	$ catkin_make install
	$ cd -


----------------------------------------------------------------------------------------

ROSBAG recording and playing back data

$ mkdir ~/bagfiles
$ cd ~/bagfiles
$ rosbag record -a 		// rosbag record -O subset /turtle1/cmd_vel /turtle1/pose  (only record those two topics in a file called subset.bag)
		
$ rosbag info <your bagfile>	// see the file
$ rosbag play <your bagfile>	// play the file

----------------------------------------------------------------------------------------

ROSWTF

you can use it online (roscore running) or offline to detect warnings and erros

$ roscd <package>
$ roswtf 

 [1556641746.297292]: header: 
  seq: 0
  stamp: 
    secs: 1556641746.3
    nsecs:         0
  frame_id: ''



